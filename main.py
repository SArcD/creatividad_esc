import streamlit as st
import pandas as pd
import numpy as np
import datetime
import plotly.express as px
import matplotlib.pyplot as plt

st.set_page_config(page_title="Escalas Psicol√≥gicas Combinadas", layout="centered")

st.title("üß† Escalas Combinadas: Habilidades Sociales, S√≠ntomas Depresivos y Creatividad")

menu = st.sidebar.radio("Selecciona una escala:", [
    "Escala de Habilidades Sociales",
    "PHQ-9 (Depresi√≥n)",
    "Escala de Creatividad"])

nombre = st.text_input("Nombre o identificador del estudiante:")

# ================================
# FUNCI√ìN GENERAL DE RADAR PLOT
# ================================
def plot_radar(labels, values, title):
    angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
    values += values[:1]
    angles += angles[:1]
    fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
    ax.fill(angles, values, alpha=0.25)
    ax.plot(angles, values, linewidth=2)
    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(labels)
    ax.set_yticks([1, 2, 3, 4, 5])
    ax.set_yticklabels(['1', '2', '3', '4', '5'])
    ax.set_title(title, y=1.1)
    st.pyplot(fig)

# =====================================
# ESCALA DE HABILIDADES SOCIALES (GISMERO)
# =====================================
def escala_ehs(nombre):
    st.subheader("Escala de Habilidades Sociales - Gismero (2010)")
    st.info(
        "üîé **Instrucciones:** Responde seg√∫n tu nivel de acuerdo con cada afirmaci√≥n.\n"
        "- 1 = Muy en desacuerdo\n"
        "- 2 = En desacuerdo\n"
        "- 3 = Ni de acuerdo ni en desacuerdo\n"
        "- 4 = De acuerdo\n"
        "- 5 = Muy de acuerdo\n\n"
        "üìå **Interpretaci√≥n general:**\n"
        "Puntajes m√°s altos indican mayor competencia en habilidades sociales dentro de esa dimensi√≥n espec√≠fica."
    )
    
    dimensiones = {
        "Autoexpresi√≥n en situaciones sociales": [
            "Me resulta dif√≠cil comenzar una conversaci√≥n con personas desconocidas.",
            "Evito hablar en p√∫blico siempre que puedo.",
            "Siento ansiedad cuando tengo que hacer una llamada importante."
        ],
        "Defensa de los propios derechos": [
            "Me cuesta decir que no cuando alguien me pide un favor.",
            "A menudo cedo incluso cuando no estoy de acuerdo.",
            "Evito conflictos aunque no est√© conforme."
        ],
        "Expresi√≥n de enfado o disconformidad": [
            "Reprimo mi enfado para evitar problemas.",
            "Prefiero callar antes que discutir.",
            "Me cuesta expresar molestia cuando algo no me gusta."
        ],
        "Hacer peticiones": [
            "Me cuesta pedir ayuda cuando la necesito.",
            "Evito pedir favores por miedo a molestar.",
            "Prefiero arregl√°rmelas solo antes que pedir algo."
        ],
        "Iniciar interacciones positivas con el sexo opuesto": [
            "Me resulta dif√≠cil iniciar conversaciones con personas que me atraen.",
            "Evito el contacto visual con personas que me interesan.",
            "Me pongo nervioso/a al hablar con alguien que me gusta."
        ],
        "Interacci√≥n con personas de estatus elevado": [
            "Me intimidan las figuras de autoridad.",
            "Me pongo nervioso/a ante personas importantes.",
            "Me cuesta expresar mis ideas frente a personas influyentes."
        ]
    }
    respuestas = {}
    dim_scores = {}
    contador = 1
#    for dim, preguntas in dimensiones.items():
#        st.subheader(dim)
#        suma = 0
#        for preg in preguntas:
#            resp = st.radio(f"{contador}. {preg}", options=[1, 2, 3, 4, 5], index=2, key=f"ehs_{contador}")
#            respuestas[contador] = resp
#            suma += resp
#            contador += 1
#        dim_scores[dim] = suma / len(preguntas)

    for dim, preguntas in dimensiones.items():
        st.subheader(dim)
        suma = 0
        for preg in preguntas:
            resp = st.radio(f"{contador}. {preg}", options=[1, 2, 3, 4, 5], index=2, key=f"ehs_{contador}")
            respuestas[contador] = resp
            resp_invertido = 6 - resp  # Invertir la escala para que 5 = alta habilidad social
            suma += resp_invertido
            contador += 1
        dim_scores[dim] = suma / len(preguntas)


    
    st.markdown("---")
    st.subheader("üìà Resultados")

    # Mostrar puntajes y diagn√≥stico por dimensi√≥n
    for dim, score in dim_scores.items():
        st.write(f"**{dim}:** {score:.2f}")
        if score >= 4.0:
            st.success(f"Competencia alta en {dim.lower()}.")
        elif score >= 3.0:
            st.info(f"Competencia adecuada en {dim.lower()}.")
        elif score >= 2.0:
            st.warning(f"Dificultades moderadas en {dim.lower()}.")
        else:
            st.error(f"Dificultades significativas en {dim.lower()}.")

    
    # Mostrar puntajes por dimensi√≥n
    #for dim, score in dim_scores.items():
    #    st.write(f"**{dim}:** {score:.2f}")

    # Calcular puntaje global (promedio de los promedios)
    puntaje_global = sum(dim_scores.values()) / len(dim_scores)
    st.write(f"\n**Puntaje Global:** {puntaje_global:.2f}")

    # Diagn√≥stico simple basado en el puntaje global
    st.markdown("### üß† Diagn√≥stico General")
    if puntaje_global >= 4.0:
        st.success("Excelente nivel de habilidades sociales. Se observa gran confianza y capacidad para interactuar en diversos contextos.")
    elif puntaje_global >= 3.0:
        st.info("Nivel adecuado de habilidades sociales. Hay buenas competencias, aunque pueden mejorarse algunos aspectos espec√≠ficos.")
    elif puntaje_global >= 2.0:
        st.warning("Habilidades sociales limitadas. Se recomienda trabajar en la expresi√≥n y defensa de tus ideas en entornos sociales.")
    else:
        st.error("Dificultades significativas en habilidades sociales. Podr√≠a ser √∫til explorar estrategias para mejorar la comunicaci√≥n interpersonal.")

    # Gr√°fico tipo radar
    plot_radar(list(dim_scores.keys()), list(dim_scores.values()), "Perfil de Habilidades Sociales")

    
    # --- BLOQUE DE AN√ÅLISIS COLECTIVO PARA EHS ---
    st.markdown("---")
    st.subheader("üìÇ An√°lisis colectivo - Habilidades Sociales")

    archivo = st.file_uploader("Carga un archivo .csv con respuestas de estudiantes (EHS)", type=["csv"], key="ehs")
    if archivo:
        df = pd.read_csv(archivo)

        # Mapear preguntas a dimensiones con nombres amigables
        mapa_dimensiones = {
            "Autoexpresi√≥n en situaciones sociales": ["Q1", "Q2", "Q3"],
            "Defensa de los propios derechos": ["Q4", "Q5", "Q6"],
            "Expresi√≥n de enfado o disconformidad": ["Q7", "Q8", "Q9"],
            "Hacer peticiones": ["Q10", "Q11", "Q12"],
            "Iniciar interacciones positivas con el sexo opuesto": ["Q13", "Q14", "Q15"],
            "Interacci√≥n con personas de estatus elevado": ["Q16", "Q17", "Q18"]
        }

        dimensiones = list(mapa_dimensiones.keys())

        # Calcular promedios por dimensi√≥n
        for nombre, preguntas in mapa_dimensiones.items():
            df[nombre] = df[preguntas].mean(axis=1)

        # Boxplot con nombres amigables
        st.write("üìä Boxplot de las dimensiones")
        df_melted = df.melt(id_vars=["Nombre"], value_vars=dimensiones, var_name="Dimensi√≥n", value_name="Puntaje")
        fig = px.box(df_melted, x="Dimensi√≥n", y="Puntaje", points="all", hover_data=["Nombre"],
                 title="Distribuci√≥n por dimensi√≥n (EHS)")
        st.plotly_chart(fig)

        st.subheader("üîç Visualizaci√≥n individual o por perfil")
        opciones_filtrado = st.radio("Selecciona el tipo de filtro:", ["Por nombre", "Por perfil similar"], key="ehs_filtro")

        if opciones_filtrado == "Por nombre":
            seleccion = st.selectbox("Selecciona un nombre:", df["Nombre"].unique(), key="ehs_nombre")
            alumno = df[df["Nombre"] == seleccion].iloc[0]
            plot_radar(dimensiones, [alumno[dim] for dim in dimensiones], f"Habilidades Sociales - {seleccion}")

        elif opciones_filtrado == "Por perfil similar":
            df["Puntaje Global"] = df[dimensiones].mean(axis=1)
            umbral = st.slider("Filtra por puntaje global m√≠nimo:", 1.0, 5.0, 3.5, 0.1, key="ehs_umbral")
            filtrado = df[df["Puntaje Global"] >= umbral]
            st.write(f"{len(filtrado)} estudiantes con puntaje global ‚â• {umbral}")

            for idx, row in filtrado.iterrows():
                st.markdown(f"**{row['Nombre']} ({row['Puntaje Global']:.2f}):**")
                plot_radar(dimensiones, [row[dim] for dim in dimensiones], row["Nombre"])


# =====================================
# ESCALA PHQ-9 (DEPRESI√ìN)
# =====================================
def escala_phq9(nombre):
    st.subheader("PHQ-9 - Evaluaci√≥n de S√≠ntomas Depresivos")

    st.info(
        "üîé **Instrucciones:** Marca la opci√≥n que mejor describa tu experiencia en los √∫ltimos 14 d√≠as.\n"
        "- 0 = En ning√∫n momento\n"
        "- 1 = Varios d√≠as\n"
        "- 2 = M√°s de la mitad de los d√≠as\n"
        "- 3 = Casi todos los d√≠as\n\n"
        "üìå **Interpretaci√≥n general:**\n"
        "A mayor puntaje total, mayor presencia de s√≠ntomas depresivos."
    )

    preguntas = [
        "Poco inter√©s o placer en hacer cosas",
        "Sentirse deca√≠do, deprimido o sin esperanzas",
        "Dificultad para dormir o dormir en exceso",
        "Sentirse cansado o con poca energ√≠a",
        "Falta de apetito o comer en exceso",
        "Sentirse mal consigo mismo o que es un fracaso",
        "Dificultad para concentrarse",
        "Moverse o hablar muy lento o estar inquieto",
        "Pensamientos de que estar√≠a mejor muerto"
    ]

    respuestas = []
    for i, pregunta in enumerate(preguntas):
        resp = st.radio(f"{i+1}. {pregunta}", [0, 1, 2, 3], index=0, key=f"phq9_{i}")
        respuestas.append(resp)

    total = sum(respuestas)
    st.markdown("---")
    st.subheader("üìà Resultados")

    st.write(f"**Puntaje total:** {total}")

    # Diagn√≥stico
    if total <= 4:
        st.success("M√≠nima o sin depresi√≥n")
    elif total <= 9:
        st.info("Leve")
    elif total <= 14:
        st.info("Moderada")
    elif total <= 19:
        st.warning("Moderadamente Severa")
    else:
        st.error("Severa")

    st.markdown("### üß† Diagn√≥stico General")
    st.caption("üìå El PHQ-9 no sustituye una evaluaci√≥n cl√≠nica. Si experimentas malestar, considera buscar ayuda profesional.")

    # Gr√°fico tipo radar
    plot_radar(preguntas, respuestas, "Perfil de s√≠ntomas depresivos (PHQ-9)")


    st.markdown("---")
    st.subheader("üìÇ An√°lisis colectivo - PHQ-9")

    archivo = st.file_uploader("Carga un archivo .csv con respuestas de PHQ-9", type=["csv"], key="phq9")
    if archivo:
        df = pd.read_csv(archivo)

        # Columnas originales del archivo
        columnas_originales = [f"Pregunta_{i}" for i in range(1, 10)]

        # Nuevos nombres descriptivos por √≠tem
        etiquetas_descriptivas = [
            "P√©rdida de inter√©s", "√Ånimo bajo", "Alteraci√≥n del sue√±o",
            "Cansancio", "Cambios en el apetito", "Autoimagen negativa",
            "Dificultad para concentrarse", "Agitaci√≥n o lentitud", "Ideaci√≥n suicida"
        ]

        # Crear un diccionario para cambiar nombres
        renombrar = {f"Pregunta_{i+1}": etiquetas_descriptivas[i] for i in range(9)}
        df = df.rename(columns=renombrar)

        preguntas = etiquetas_descriptivas
        df["Puntaje Total"] = df[preguntas].sum(axis=1)

        # Derretir el DataFrame para boxplot interactivo
        df_melted = df.melt(id_vars=["Nombre", "Puntaje Total"], value_vars=preguntas,
                        var_name="S√≠ntoma", value_name="Respuesta")

        st.write("üìä Boxplot de s√≠ntomas depresivos")
        fig = px.box(df_melted, x="S√≠ntoma", y="Respuesta", points="all",
                 hover_data=["Nombre", "Puntaje Total"],
                 title="Distribuci√≥n de respuestas (PHQ-9)")
        st.plotly_chart(fig)

        st.subheader("üîç Visualizaci√≥n individual o por perfil")
        opciones_filtrado = st.radio("Selecciona el tipo de filtro:", ["Por nombre", "Por perfil similar"], key="phq9_filtro")

        if opciones_filtrado == "Por nombre":
            seleccion = st.selectbox("Selecciona un nombre:", df["Nombre"].unique(), key="phq9_nombre")
            alumno = df[df["Nombre"] == seleccion].iloc[0]
            plot_radar(preguntas, [alumno[p] for p in preguntas], f"PHQ-9 - {seleccion}")

        elif opciones_filtrado == "Por perfil similar":
            umbral = st.slider("Filtra por puntaje total m√≠nimo:", 0, 27, 10, 1, key="phq9_umbral")
            filtrado = df[df["Puntaje Total"] >= umbral]
            st.write(f"{len(filtrado)} estudiantes con puntaje total ‚â• {umbral}")

            for idx, row in filtrado.iterrows():
                st.markdown(f"**{row['Nombre']} ({row['Puntaje Total']}):**")
                plot_radar(preguntas, [row[p] for p in preguntas], row["Nombre"])

# =====================================
# ESCALA DE CREATIVIDAD DE GOUGH
# =====================================
def escala_creatividad(nombre):
    st.subheader("Escala de Creatividad - Gough (adaptada)")

    st.info("""
    A continuaci√≥n encontrar√°s una serie de afirmaciones relacionadas con tu forma de pensar, actuar y adaptarte ante situaciones nuevas.

    Por favor, responde **qu√© tanto te identificas con cada afirmaci√≥n** utilizando la siguiente escala:

    - **1**: Muy en desacuerdo  
    - **2**: En desacuerdo  
    - **3**: Ni de acuerdo ni en desacuerdo  
    - **4**: De acuerdo  
    - **5**: Muy de acuerdo  
    """)

    dimensiones = {
        "Capacidad para resolver problemas": [
            "Soy capaz de encontrar soluciones cuando enfrento dificultades.",
            "Disfruto analizar situaciones para entender c√≥mo resolverlas.",
            "Busco diferentes enfoques antes de tomar una decisi√≥n.",
            "Puedo adaptarme cuando las cosas no salen como esperaba.",
            "Me esfuerzo por mejorar continuamente mis m√©todos de trabajo."
        ],
        "Seguridad en s√≠ mismo para resolver problemas": [
            "Conf√≠o en mi capacidad para superar retos complejos.",
            "Creo en mis habilidades para tomar buenas decisiones.",
            "Me mantengo firme incluso cuando otros dudan de m√≠.",
            "No me intimidan los problemas dif√≠ciles.",
            "Me siento seguro al proponer ideas nuevas."
        ],
        "Capacidad para desafiar normas": [
            "Estoy dispuesto a cuestionar reglas establecidas.",
            "No tengo miedo de expresar opiniones impopulares.",
            "Me atrevo a proponer cambios aunque sean disruptivos.",
            "Creo que romper esquemas puede ser positivo.",
            "A veces rompo las reglas si creo que es lo correcto."
        ],
        "Apertura a nuevas experiencias": [
            "Me interesa conocer culturas y formas de vida diferentes.",
            "Disfruto aprender cosas nuevas cada d√≠a.",
            "Estoy dispuesto a probar actividades desconocidas.",
            "Me atrae explorar lo inesperado.",
            "Me adapto f√°cilmente a cambios."
        ],
        "Tendencia a ajustarse a normas sociales y evitar riesgos creativos": [
            "Prefiero seguir lo que dicta la mayor√≠a.",
            "Evito tomar decisiones que puedan parecer arriesgadas.",
            "Me siento m√°s c√≥modo repitiendo lo que ya ha funcionado.",
            "Dudo en proponer ideas que no han sido probadas.",
            "Prefiero mantenerme dentro de lo convencional."
        ]
    }

    respuestas = {}
    dim_scores = {}
    contador = 1
    for dim, preguntas in dimensiones.items():
        st.subheader(dim)
        suma = 0
        for preg in preguntas:
            resp = st.radio(f"{contador}. {preg}", options=[1, 2, 3, 4, 5], index=2, key=f"crea_{contador}")
            respuestas[contador] = resp
            suma += resp
            contador += 1
        dim_scores[dim] = suma / len(preguntas)

    puntaje_total = np.mean(list(respuestas.values()))
    st.subheader("üîç Resultado general")
    st.write(f"**Puntaje promedio global:** {puntaje_total:.2f}")
    if puntaje_total >= 4.0:
        st.success("Alto perfil creativo")
    elif puntaje_total >= 3.0:
        st.info("Perfil moderadamente creativo")
    elif puntaje_total >= 2.0:
        st.warning("Perfil con rasgos creativos limitados")
    else:
        st.error("Tendencia a evitar comportamientos creativos")

    st.subheader("üìä Perfil por dimensi√≥n")
    for k, v in dim_scores.items():
        st.write(f"**{k}:** {v:.2f}")
        if v >= 4.0:
            st.success(f"Fortaleza destacada en {k.lower()}.")
        elif v >= 3.0:
            st.info(f"Competencia adecuada en {k.lower()}.")
        elif v >= 2.0:
            st.warning(f"Dificultades moderadas en {k.lower()}.")
        else:
            st.error(f"Dificultades significativas en {k.lower()}.")

    plot_radar(list(dim_scores.keys()), list(dim_scores.values()), f"Radar Creatividad - {nombre}")

    
    st.markdown("---")
    st.subheader("üìÇ An√°lisis colectivo - Creatividad")

    archivo = st.file_uploader("Carga un archivo .csv con respuestas de creatividad", type=["csv"], key="creatividad")
    if archivo:
        df = pd.read_csv(archivo)
        dimensiones = [
            "Capacidad para resolver problemas",
            "Seguridad en s√≠ mismo para resolver problemas",
            "Capacidad para desafiar normas",
            "Apertura a nuevas experiencias",
            "Tendencia a ajustarse a normas sociales y evitar riesgos creativos"
        ]
        df["Puntaje Global"] = df[dimensiones].mean(axis=1)

        # üëâ Derretir el DataFrame para plotly
        df_melted = df.melt(id_vars=["Nombre", "Puntaje Global"],
                            value_vars=dimensiones,
                            var_name="Dimensi√≥n",
                            value_name="Puntaje")

        st.write("üìä Boxplot de dimensiones")
        fig = px.box(df_melted,
                     x="Dimensi√≥n",
                     y="Puntaje",
                     points="all",
                     hover_data=["Nombre", "Puntaje Global"],
                     title="Distribuci√≥n de dimensiones creativas")
        st.plotly_chart(fig)

        st.subheader("üîç Visualizaci√≥n individual o por perfil")
        opciones_filtrado = st.radio("Selecciona el tipo de filtro:", ["Por nombre", "Por perfil similar"], key="creatividad_filtro")

        if opciones_filtrado == "Por nombre":
            seleccion = st.selectbox("Selecciona un nombre:", df["Nombre"].unique(), key="creatividad_nombre")
            alumno = df[df["Nombre"] == seleccion].iloc[0]
            plot_radar(dimensiones, [alumno[dim] for dim in dimensiones], f"Perfil Creativo - {seleccion}")

        elif opciones_filtrado == "Por perfil similar":
            umbral = st.slider("Filtra por puntaje global m√≠nimo:", 1.0, 5.0, 3.5, 0.1, key="creatividad_umbral")
            filtrado = df[df["Puntaje Global"] >= umbral]
            st.write(f"{len(filtrado)} estudiantes con puntaje global ‚â• {umbral}")

            for idx, row in filtrado.iterrows():
                st.markdown(f"**{row['Nombre']} ({row['Puntaje Global']:.2f}):**")
                plot_radar(dimensiones, [row[dim] for dim in dimensiones], row["Nombre"])

import streamlit as st
import numpy as np
import plotly.graph_objects as go

# Funci√≥n para graficar el radar
def plot_radar(labels, values, title=""):
    fig = go.Figure()
    fig.add_trace(go.Scatterpolar(
        r=values + [values[0]],
        theta=labels + [labels[0]],
        fill='toself',
        name='Puntaje'
    ))
    fig.update_layout(
        polar=dict(radialaxis=dict(visible=True, range=[0, 10])),
        showlegend=False,
        title=title
    )
    st.plotly_chart(fig)

# Funci√≥n principal
def neuropsi_evaluacion(nombre):
    st.subheader("Evaluaci√≥n NEUROPSI - Atenci√≥n y Memoria (Versi√≥n Adaptada)")

    st.info("""
    Esta prueba simula los tres dominios principales evaluados por NEUROPSI. Por favor, califica a la persona evaluada del 0 al 10 en cada tarea descrita, donde:

    - **0**: Dificultad severa  
    - **10**: Funcionamiento completamente adecuado  
    """)

    dimensiones = {
        "Atenci√≥n y funciones ejecutivas": [
            "Capacidad para enfocarse en est√≠mulos relevantes",
            "Mantiene la atenci√≥n durante tareas largas",
            "Velocidad de procesamiento mental",
            "Fluidez verbal bajo presi√≥n",
            "Capacidad para inhibir respuestas autom√°ticas",
            "Planeaci√≥n y organizaci√≥n de tareas"
        ],
        "Memoria": [
            "Recuerdo inmediato de listas verbales",
            "Manipulaci√≥n mental de informaci√≥n (memoria de trabajo)",
            "Recuerdo diferido (sin claves)",
            "Reconocimiento de informaci√≥n previa",
            "Memoria visual de figuras y ubicaciones"
        ],
        "Lenguaje y habilidades acad√©micas": [
            "Comprensi√≥n oral de instrucciones",
            "Expresi√≥n verbal espont√°nea",
            "Nombramiento de objetos o im√°genes",
            "Comprensi√≥n lectora funcional",
            "Resoluci√≥n de operaciones matem√°ticas b√°sicas"
        ]
    }

    respuestas = {}
    dim_scores = {}
    contador = 1
    for dim, preguntas in dimensiones.items():
        st.subheader(dim)
        suma = 0
        for preg in preguntas:
            resp = st.slider(f"{contador}. {preg}", 0, 10, 5, key=f"neuropsi_{contador}")
            respuestas[contador] = resp
            suma += resp
            contador += 1
        dim_scores[dim] = suma / len(preguntas)

    puntaje_total = np.mean(list(respuestas.values()))
    st.subheader("üßæ Resultado general estimado")
    st.write(f"**Puntaje promedio global:** {puntaje_total:.2f} / 10")

    if puntaje_total >= 8.0:
        st.success("Funcionamiento cognitivo dentro del rango esperado.")
    elif puntaje_total >= 6.0:
        st.info("Funcionamiento adecuado con algunas √°reas por observar.")
    elif puntaje_total >= 4.0:
        st.warning("Dificultades moderadas. Se sugiere valoraci√≥n completa.")
    else:
        st.error("Dificultades significativas. Se recomienda evaluaci√≥n profesional especializada.")

    st.subheader("üìä Perfil por dominio")
    for k, v in dim_scores.items():
        st.write(f"**{k}:** {v:.2f}")
        if v >= 8.0:
            st.success(f"Excelente desempe√±o en {k.lower()}.")
        elif v >= 6.0:
            st.info(f"Desempe√±o aceptable en {k.lower()}.")
        elif v >= 4.0:
            st.warning(f"√Årea con dificultades en {k.lower()}.")
        else:
            st.error(f"Dificultades severas en {k.lower()}.")

    plot_radar(list(dim_scores.keys()), list(dim_scores.values()), f"Perfil NEUROPSI - {nombre}")




# === LLAMADO A FUNCIONES ===
if menu == "Escala de Habilidades Sociales":
    escala_ehs(nombre)
elif menu == "PHQ-9 (Depresi√≥n)":
    escala_phq9(nombre)
elif menu == "Escala de Creatividad":
    escala_creatividad(nombre)
elif menu == "Neuropsi":
    neurop(nombre)
